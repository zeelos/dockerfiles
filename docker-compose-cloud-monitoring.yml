# zeelos - cloud - monitoring
# MAINTAINER zeelos.io - https://zeelos.io

version: '3.6'

services:

  prometheus:
    image: prom/prometheus:v2.2.1
    volumes:
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/config.yml'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
    networks:
      - cloudnet
      - edgenet
    ports:
      - 9091:9090
    configs:
      - source: prometheus_config
        target: /etc/prometheus/config.yml
      - source: prometheus_task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: prometheus_node_rules
        target: /etc/prometheus/swarm_node.rules.yml
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "Prometheus - From metrics to insight, Power your metrics and alerting with a leading open-source monitoring solution"

  cadvisor-cloud:
    image: google/cadvisor:v0.29.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock,readonly
      - /:/rootfs
      - /var/run:/var/run
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker
    networks:
      - cloudnet
    ports:
      - 8090:8080
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "cAdvisor - Analyzes resource usage and performance characteristics of running containers"

  node-exporter-cloud:
    image: zeelos/node_exporter:v0.16.0
    environment:
      - NODE_ID={{.Node.ID}}
      - NODE_NAME=zeelos-cloud
    networks:
      - cloudnet
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'
      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
      - '--collector.textfile.directory=/etc/node-exporter/'
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "node-exporter - Exporter for machine metrics"

  docker-exporter-cloud:
    image: basi/socat:v0.1.0
    environment:
      - IN=172.18.0.1:9323
      - OUT=9323
    networks:
      - cloudnet
    deploy:
      mode: global
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "docker-exporter - Provides the possibility of cat a TCP connection to a defined PORT"

  alertmanager:
    image: prom/alertmanager:v0.14.0
    volumes:
      - alertmanager-data:/alertmanager
    networks:
      - cloudnet
    ports:
     - 9093:9093
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == cloud
    configs:
      - source: alertmanager.config
        target: /etc/alertmanager/config.yml
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "alertmanager - The Alertmanager handles alerts sent by client applications such as the Prometheus server"

  unsee:
    image: cloudflare/unsee:v0.9.2
    networks:
      - cloudnet
    ports:
     - 9094:8080
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "unsee - Alert dashboard for Prometheus Alertmanager"

  kafka-exporter-cloud:
    image: danielqsj/kafka-exporter:v1.1.0
    secrets:
      - source: client-cloud.certificate.pem
        target: /etc/kafka/secrets/client-cloud.certificate.pem
      - source: client-cloud.key
        target: /etc/kafka/secrets/client-cloud.key
    networks:
      - cloudnet
    command:
      - '--kafka.server=kafka-cloud:9092'
      - '--web.listen-address=:8080'
      - '--tls.enabled'
      - '--tls.cert-file=/etc/kafka/secrets/client-cloud.certificate.pem'
      - '--tls.key-file=/etc/kafka/secrets/client-cloud.key'
      - '--tls.insecure-skip-tls-verify'
    deploy:
      placement:
        constraints:
          - node.labels.type == cloud
    labels:
      io.zeelos.app: "zeelos"
      io.zeelos.role: "Kafka Exporter - Kafka exporter for Prometheus (non-jmx)"

configs:
  prometheus_config:
    file: ./configs/prometheus/conf/config.yml
  prometheus_task_rules:
    file: ./configs/prometheus/rules/swarm_task.rules.yml
  prometheus_node_rules:
    file: ./configs/prometheus/rules/swarm_node.rules.yml
  alertmanager.config:
    file: ./configs/alertmanager/config.yml

secrets:
  client-cloud.certificate.pem:
    file: ./security/client-cloud.certificate.pem
  client-cloud.key:
    file: ./security/client-cloud.key

volumes:
  prometheus-data:
  alertmanager-data:

networks:
  cloudnet:
    external: true
    name: cloudnet
  edgenet:
    external: true
    name: edgenet_server1
